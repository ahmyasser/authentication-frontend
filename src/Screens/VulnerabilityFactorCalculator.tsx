import { useState } from "react";
import Dropdown from "../Components/Dropdown";
import {
  easeOfDiscoveryOptions,
  easeOfExploitOptions,
  awarenessOptions,
  intrusionDetectionOptions,
} from "../data";

const initialVulnerabilityFactors = {
  easeOfDiscovery: 0,
  easeOfExploit: 0,
  awareness: 0,
  intrusionDetection: 0,
  // ... other factors
};

const VulnerabilityCalculator = ({ onUpdate }: { onUpdate: Function }) => {
  const [factors, setFactors] = useState(initialVulnerabilityFactors);

  // Update factor state
  const handleFactorChange = (factor: string, value: number) => {
    setFactors((prevFactors) => ({
      ...prevFactors,
      [factor]: parseInt(value.toString()),
    }));
  };

  const calculateRisk = () => {
    onUpdate(
      (factors.easeOfDiscovery +
        factors.easeOfExploit +
        factors.awareness +
        factors.intrusionDetection) /
        4
    );
    return (
      (factors.easeOfDiscovery +
        factors.easeOfExploit +
        factors.awareness +
        factors.intrusionDetection) /
      4
    );
  };

  return (
    <div className="rating-calculator">
      <h3>Vulnerability Factor</h3>

      {/* Threat Agent Factors */}
      <Dropdown
        label="Ease Of Discovery"
        options={easeOfDiscoveryOptions}
        value={factors.easeOfDiscovery}
        onChange={(value: number) =>
          handleFactorChange("easeOfDiscovery", value)
        }
      />
      <Dropdown
        label="Ease Of Exploit"
        options={easeOfExploitOptions}
        value={factors.easeOfExploit}
        onChange={(value: number) => handleFactorChange("easeOfExploit", value)}
      />
      <Dropdown
        label="Opportunity"
        options={awarenessOptions}
        value={factors.awareness}
        onChange={(value: number) => handleFactorChange("awareness", value)}
      />
      <Dropdown
        label="Intrusion Detection"
        options={intrusionDetectionOptions}
        value={factors.intrusionDetection}
        onChange={(value: number) =>
          handleFactorChange("intrusionDetection", value)
        }
      />

      <div className="result">Vulnerability Factor: {calculateRisk()}</div>
    </div>
  );
};

export default VulnerabilityCalculator;
